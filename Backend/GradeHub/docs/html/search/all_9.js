var searchData=
[
  ['mapdelete_0',['MapDelete',['../_program_8cs.html#a840f0b47a023ba1f1e9fb43d1d256c43',1,'MapDelete(&quot;/api/students/{id}&quot;,(string id)=&gt; { var student=people.OfType&lt; Student &gt;().FirstOrDefault(s=&gt; s.GetStudentId()==id);if(student==null) return Results.NotFound();people.Remove(student);foreach(var cls in classes) { if(cls.Students.Contains(student)) { cls.Students.Remove(student);SaveClassData(cls);} } DeleteStudentData(id);return Results.NoContent();}):&#160;Program.cs'],['../_program_8cs.html#adca97537aa6cf075b6e77107709df1f6',1,'MapDelete(&quot;/api/classes/{className}/students/{studentId}&quot;,(string className, string studentId)=&gt; { var decodedClassName=Uri.UnescapeDataString(className);var classObj=classes.FirstOrDefault(c=&gt; c.ClassName==decodedClassName);if(classObj==null) return Results.NotFound(&quot;Class not found&quot;);var student=people.OfType&lt; Student &gt;().FirstOrDefault(s=&gt; s.GetStudentId()==studentId);if(student==null) return Results.NotFound(&quot;Student not found&quot;);if(!classObj.Students.Contains(student)) return Results.BadRequest(&quot;Student is not in the class&quot;);classObj.Students.Remove(student);SaveClassData(classObj);return Results.NoContent();}):&#160;Program.cs'],['../_program_8cs.html#a76ef9db12078f25330aee1e68f8f51e8',1,'MapDelete(&quot;/api/students/{studentId}/grades/{gradeId}&quot;,(string studentId, Guid gradeId)=&gt; { var student=people.OfType&lt; Student &gt;().FirstOrDefault(s=&gt; s.GetStudentId()==studentId);if(student==null) return Results.NotFound(&quot;Student not found&quot;);var success=student.RemoveGradeById(gradeId);if(!success) return Results.NotFound(&quot;Grade not found&quot;);SaveStudentData(student);return Results.NoContent();}):&#160;Program.cs']]],
  ['mapget_1',['MapGet',['../_program_8cs.html#af128afc79f8df79ee9333c4d208679ef',1,'MapGet(&quot;/&quot;,()=&gt; Results.Redirect(&quot;/swagger&quot;)):&#160;Program.cs'],['../_program_8cs.html#a6fa1a0836f6fc91d13969241ceb2b8ab',1,'MapGet(&quot;/api/students&quot;,()=&gt; { var students=people.OfType&lt; Student &gt;().Select(s=&gt; new { Id=s.GetStudentId(), Name=s.GetName() });return students;}):&#160;Program.cs'],['../_program_8cs.html#a3063557278156ef21dc465d6a116b495',1,'MapGet(&quot;/api/students/{id}/grades&quot;,(string id)=&gt; { var student=people.OfType&lt; Student &gt;().FirstOrDefault(s=&gt; s.GetStudentId()==id);if(student==null) return Results.NotFound();var grades=student.GetGradeHistory().Select(g=&gt; new { Id=g.Id, ClassId=g.Grade.ClassId, Value=g.Grade.GradeValue, Date=g.Timestamp });return Results.Ok(grades);}):&#160;Program.cs'],['../_program_8cs.html#a1423d1e1a5b9f1baf745b1128a36c83f',1,'MapGet(&quot;/api/teachers&quot;,()=&gt; { var teachers=people.OfType&lt; Teacher &gt;().Select(t=&gt; new { Name=t.GetName(), ClassId=t.ClassId });return teachers;}):&#160;Program.cs'],['../_program_8cs.html#ad1efbe452d3052e466f41b9cca2224a6',1,'MapGet(&quot;/api/classes&quot;,()=&gt; { var classesDto=classes.Select(cls=&gt; new { ClassName=cls.ClassName, Teacher=new { Name=cls.Teacher.GetName(), ClassId=cls.Teacher.ClassId }, Students=cls.Students.Select(s=&gt; new { Id=s.GetStudentId(), Name=s.GetName() }).ToList() });return classesDto;}):&#160;Program.cs']]],
  ['mappost_2',['MapPost',['../_program_8cs.html#a6f4a7a6b36e81fdc1a84031ed28a4d4e',1,'MapPost(&quot;/api/auth/reset-password&quot;,([FromBody] ResetPasswordDto dto)=&gt; { var person=people.FirstOrDefault(p=&gt; p.GetUserCredentials()?.Email==dto.Email);if(person==null) return Results.NotFound(&quot;User with this email not found&quot;);var credentials=person.GetUserCredentials();if(credentials==null) return Results.BadRequest(&quot;User does not have credentials&quot;);credentials.PasswordHash=HashPassword(dto.NewPassword);if(person is Student student) SaveStudentData(student);else if(person is Teacher teacher) SaveTeacherData(teacher);return Results.Ok(&quot;Password reset successfully&quot;);}):&#160;Program.cs'],['../_program_8cs.html#ad0b750b35a6be4e8f0d0a76d8d10908f',1,'MapPost(&quot;/api/students&quot;,([FromBody] StudentDto studentDto)=&gt; { var generatedId=Guid.NewGuid().ToString();var student=new Student(studentDto.Name, generatedId);if(!string.IsNullOrEmpty(studentDto.Email) &amp;&amp;!string.IsNullOrEmpty(studentDto.Password)) { var credentials=new UserCredentials(username:null!, password:studentDto.Password, email:studentDto.Email, userType:UserType.Student);student.SetUserCredentials(credentials);} people.Add(student);SaveStudentData(student);return Results.Created($&quot;/api/students/{student.GetStudentId()}&quot;, new { Id=student.GetStudentId(), Name=student.GetName() });}):&#160;Program.cs'],['../_program_8cs.html#a514f8766dd2b4c3327be71dafd45fd0e',1,'MapPost(&quot;/api/teachers&quot;,([FromBody] TeacherDto teacherDto)=&gt; { var teacher=new Teacher(teacherDto.Name, teacherDto.ClassId);if(!string.IsNullOrEmpty(teacherDto.Email) &amp;&amp;!string.IsNullOrEmpty(teacherDto.Password)) { var credentials=new UserCredentials(username:null!, password:teacherDto.Password, email:teacherDto.Email, userType:UserType.Teacher);teacher.SetUserCredentials(credentials);} people.Add(teacher);SaveTeacherData(teacher);var newClass=new Class(teacherDto.ClassName ?? teacherDto.ClassId, teacher);classes.Add(newClass);SaveClassData(newClass);return Results.Created($&quot;/api/teachers/{teacher.ClassId}&quot;, new { Name=teacher.GetName(), ClassId=teacher.ClassId, ClassName=newClass.ClassName });}):&#160;Program.cs'],['../_program_8cs.html#ac68af9961e15d9fef813bb0467a27ec3',1,'MapPost(&quot;/api/classes&quot;,([FromBody] ClassDto classDto)=&gt; { var teacher=people.OfType&lt; Teacher &gt;().FirstOrDefault(t=&gt; t.ClassId==classDto.TeacherId);if(teacher==null) return Results.BadRequest(&quot;Teacher not found&quot;);var newClass=new Class(classDto.ClassName, teacher);if(classDto.StudentIds !=null) { foreach(var studentId in classDto.StudentIds) { var student=people.OfType&lt; Student &gt;().FirstOrDefault(s=&gt; s.GetStudentId()==studentId);if(student !=null) newClass.AddStudent(student);} } classes.Add(newClass);SaveClassData(newClass);return Results.Created($&quot;/api/classes/{newClass.ClassName}&quot;, new { ClassName=newClass.ClassName, Teacher=new { Name=newClass.Teacher.GetName(), ClassId=newClass.Teacher.ClassId }, Students=newClass.Students.Select(s=&gt; new { Id=s.GetStudentId(), Name=s.GetName() }).ToList() });}):&#160;Program.cs'],['../_program_8cs.html#a53698f92735e4efa95f4a34f907a2416',1,'MapPost(&quot;/api/classes/{className}/students/{studentId}&quot;,(string className, string studentId)=&gt; { var decodedClassName=Uri.UnescapeDataString(className);var classObj=classes.FirstOrDefault(c=&gt; c.ClassName==decodedClassName);if(classObj==null) return Results.NotFound(&quot;Class not found&quot;);var student=people.OfType&lt; Student &gt;().FirstOrDefault(s=&gt; s.GetStudentId()==studentId);if(student==null) return Results.NotFound(&quot;Student not found&quot;);if(classObj.Students.Contains(student)) return Results.BadRequest(&quot;Student already in class&quot;);classObj.AddStudent(student);SaveClassData(classObj);return Results.NoContent();}):&#160;Program.cs'],['../_program_8cs.html#a571337310ab77eb90949ce7c31419e95',1,'MapPost(&quot;/api/students/{id}/grades&quot;,(string id, [FromBody] GradeDto gradeDto)=&gt; { var student=people.OfType&lt; Student &gt;().FirstOrDefault(s=&gt; s.GetStudentId()==id);if(student==null) return Results.NotFound(&quot;Student not found&quot;);var grade=new Grade(gradeDto.ClassId, gradeDto.Value);if(gradeDto.Value&lt; 1||gradeDto.Value &gt; 10) return Results.BadRequest(&quot;Grade must be between 1 and 10&quot;);student.AddGradeToday(grade);SaveStudentData(student);return Results.Created($&quot;/api/students/{id}/grades&quot;, new { ClassId=grade.ClassId, Value=grade.GradeValue, Date=DateTime.Now });}):&#160;Program.cs'],['../_program_8cs.html#a913e073e0f2f031855f4808964785c29',1,'MapPost(&quot;/api/classes/{classId}/bulk-grades&quot;,(string classId, [FromBody] BulkGradeUploadDto bulkUpload)=&gt; { var classObj=classes.FirstOrDefault(c=&gt; c.Teacher.ClassId==classId);if(classObj==null) return Results.NotFound(&quot;Class not found&quot;);var gradesToUpload=bulkUpload.Grades.Select(g=&gt;(g.StudentId, g.Value)).ToList();classObj.BulkUploadGrades(classId, gradesToUpload);foreach(var gradeInfo in bulkUpload.Grades) { var student=people.OfType&lt; Student &gt;().FirstOrDefault(s=&gt; s.GetStudentId()==gradeInfo.StudentId);if(student !=null) { SaveStudentData(student);} } return Results.Ok(&quot;Grades uploaded successfully&quot;);}):&#160;Program.cs'],['../_program_8cs.html#ad95ded877e7797d260b916c77f880bf7',1,'MapPost(&quot;/api/auth/login&quot;,([FromBody] LoginDto login)=&gt; { Console.WriteLine($&quot;Login attempt for email: {login.Email}, {login.Password}&quot;);var person=people.FirstOrDefault(p=&gt; p.GetUserCredentials()?.Email==login.Email);if(person==null) { Console.WriteLine(&quot;User not found&quot;);return Results.Unauthorized();} var inputHash=HashPassword(login.Password);var storedHash=person.GetUserCredentials()?.PasswordHash;Console.WriteLine(inputHash);Console.WriteLine(storedHash);if(inputHash !=storedHash) { Console.WriteLine(&quot;Invalid password&quot;);return Results.Unauthorized();} var userType=person.GetUserCredentials()?.UserType;string role=userType==UserType.Teacher ? &quot;Teacher&quot; :&quot;Student&quot;;string id=&quot;&quot;;if(person is Student student) id=student.GetStudentId();else if(person is Teacher teacher) id=teacher.ClassId;return Results.Ok(new { Email=person.GetUserCredentials()?.Email, Role=role, Id=id, Name=person.GetName() });}):&#160;Program.cs']]],
  ['mapput_3',['MapPut',['../_program_8cs.html#a1b3b12b04e6b1a6b2471fd8d7ca8373f',1,'Program.cs']]],
  ['mathclass_4',['mathClass',['../_program_8cs.html#abb6e93ce5aa8e25d3fcb49a835352258',1,'Program.cs']]]
];
